const {
  createBot,
  createProvider,
  createFlow,
  addKeyword,
  EVENTS,
  addAnswer,
} = require("@bot-whatsapp/bot");
require("dotenv").config();
const QRPortalWeb = require("@bot-whatsapp/portal");
const BaileysProvider = require("@bot-whatsapp/provider/baileys");
const MockAdapter = require("@bot-whatsapp/database/mongo");
const path = require("path");
const fs = require("fs");
const { askAndRespond } = require("./services/geminiApi.js");
const { delay } = require("@whiskeysockets/baileys");
const menuPath = path.join(__dirname, "prompts", "prompt.txt");
const menu = fs.readFileSync(menuPath, "utf8");

// Flujo de bienvenida
const flowPrincipal = addKeyword(EVENTS.WELCOME)
  .addAnswer("üôå Hola bienvenido a *Asistavet de Venezuela CA*")
  .addAnswer("Escribe *ayuda* para ver las opciones disponibles");

// Flujo de emergencia veterinaria
const flowEmergenciaRest = addKeyword(EVENTS.ACTION)
.addAnswer(
    "Por favor env√≠a solo el n√∫mero:1, 2 o 3\n\n" +
      "1Ô∏è‚É£ *Perro* üêï\n" +
      "2Ô∏è‚É£ *Gato* üêà\n" +
      "3Ô∏è‚É£ *Otro animal* ü¶úüêáüêÑ",
    { capture: true },
    async (ctx, { flowDynamic, endFlow }) => {
      // üîÑ Validaci√≥n inteligente
      if (!ctx.body.match(/^[1-3]$/)) {
        await flowDynamic([
          "‚ö†Ô∏è *Selecci√≥n inv√°lida*",
          "Por favor env√≠a solo el n√∫mero:\n1, 2 o 3",
        ]);
        return endFlow();
      }

      // üè• Tipos de emergencia predefinidas
      const emergencias = {
        1: {
          tipo: "canina",
          emoji: "üê∂",
          preguntas: ["¬øRaza?", "¬øEdad?", "¬øS√≠ntomas principales?"],
        },
        2: {
          tipo: "felina",
          emoji: "üò∫",
          preguntas: ["¬øEs indoor/outdoor?", "¬øVacunas al d√≠a?"],
        },
        3: {
          tipo: "ex√≥tica",
          emoji: "üêæ",
          preguntas: ["¬øQu√© especie?", "¬øH√°bitat habitual?"],
        },
      };

      const seleccion = emergencias[ctx.body];

      // üí° Contexto para Gemini
      const prompt = `
Eres un veterinario de emergencias especializado en ${seleccion.tipo}.
Usuario reporta: "${ctx.fallback || "Sin detalles"}".

**Instrucciones:**
1. Diagn√≥stico preliminar (m√°x 1 oraci√≥n)
2. Primeros auxilios (3 pasos con emojis)
3. Nivel de urgencia (üö®/‚ö†Ô∏è/üîµ)
4. Recomendaci√≥n de acci√≥n inmediata

**Formato:**
üìå *Diagn√≥stico:* [texto]
ü©π *Primeros Auxilios:* 
1. [paso1] 
2. [paso2]
3. [paso3]
üöë *Urgencia:* [nivel]
üí° *Acci√≥n:* [texto]
      `;

      try {
        // üß† Consulta a Gemini
        const respuesta = await askAndRespond(prompt, ctx.body);

        // ‚úÇÔ∏è Procesamiento inteligente de respuesta
        const partes = respuesta.split("\n").filter((p) => p.trim());

        // üì≤ Env√≠o optimizado para WhatsApp
        await flowDynamic(
          `*${seleccion.emoji} Respuesta para ${seleccion.tipo.toUpperCase()}*`
        );

        for (const parte of partes) {
          await flowDynamic(parte);
          await new Promise((resolve) => setTimeout(resolve, 700));
        }

        // üìå Mensaje final con acciones
        await flowDynamic({
          body: "¬øNecesitas algo m√°s?",
          buttons: [
            { body: "üÜò Llamar Veterinario" },
            { body: "üó∫ Cl√≠nica m√°s cercana" },
            { body: "üíä Farmacias 24hrs" },
          ],
        });
      } catch (error) {
        console.error("Error veterinario:", error);
        await flowDynamic([
          "‚ö†Ô∏è *Sistema temporalmente fuera de servicio*",
          "Por favor contacta:\nüìû 555-EMERGENCIAS",
          { media: "https://example.com/contacto.jpg" },
        ]);
      }
    }
  );

// Flujo de Agendar citas veterinarias
const flowAgendar = addKeyword(EVENTS.ACTION).addAnswer(
  [
    "Para agendar tu Cita üìÜ",
    "es necesaria la siguiente informaci√≥n:",
    "",
    "üìç *¬øD√≥nde nos escribes?*",
    "Ocumare del Tuy",
    "Gran Caracas",
    "",
    "üê∂ *Especie:* (Responde: Perro, Gato o Ambos)",
    "",
    "üìù *Nombre del Paciente:*",
    "",
    "‚ö• *Sexo del paciente:* (Macho o Hembra)",
    "",
    "üéÇ *Edad aproximada:*",
    "",
    "üë§ *Nombre del Tutor/Propietario:*",
    "",
    "üè† *Direcci√≥n:*",
    "",
    "üì± *Tel√©fono:*",
    "",
    "========================",
    "üìÜ *Importante:* Una vez consignada esta informaci√≥n se le contactar√° para asignar fecha/hora",
    "========================",
    "üí≥ *M√©todos de pago:*",
    "- Efectivo üíµ (Preferiblemente pago exacto)",
    "- Pago M√≥vil üì≤",
    "- Paypal üÖø",
    "========================",
    "üì∏ *S√≠guenos en:*",
    "www.instagram.com/asistavetdevzla",
  ].join("\n"),
  { delay: 5000 }
);

// Flujo de consultas veterinarias
const flowConsultas = addKeyword(EVENTS.ACTION).addAnswer(
  [
    "‚úÖ Consulta B√°sica:üîé",
    "(Evaluaci√≥n de constantes fisiol√≥gicas del paciente) ü©∫üå°üîé + y hasta (3) Medicamentos necesarios para estabilizar la atenci√≥n üíâüíâüíâ.  Tiene un costo de 25$",
    ".",
    "‚úÖ Consultaüîé + Hidrataci√≥nüíß",
    "Canalizaci√≥n de v√≠a y suministro de f√°rmacos e hidrataci√≥n endovenosa. 40$",
    "=========================",
    "‚úÖ Procedimientos M√©dicos bajo sedaci√≥nüò¥ Precios a partir de 60$  (De acuerdo al peso vivo del animal)",
    "=========================",
    "‚úÖ Estudios Adicionales:",
    "ü©∏ Hematolog√≠a 10$",
    "üß´ Descarte Hemoparasitos 12$",
    "üî¨ Qu√≠mica Sangu√≠nea 17$",
    "üß´ Test de Parvovirus  25$",
    "üß™ Test de Moquillo 30$",
    "=========================",

    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
    "¬øDeseas agendar ahora? (Responde *SI* o *NO*)",
  ].join("\n"),
  { capture: true },
  async (ctx, { gotoFlow, endFlow }) => {
    if (ctx.body.toLowerCase() === "si") {
      return gotoFlow(flowAgendar);
    } else {
      return endFlow("üîÑ Puedes volver a escribir *MENU* cuando lo necesites");
    }
  }
);

// Flujo de consultas cirujia
const flowCirujia = addKeyword(EVENTS.ACTION).addAnswer(
  [
    "üê± *PROGRAMA DE ESTERILIZACI√ìN FELINA* üê±",
    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
    "Costos:",
    "‚Ä¢ Gato (Macho) üê±: $45",
    "‚Ä¢ Gata (Hembra) üê±: $70",
    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
    "*INCLUYE:*",
    "‚úÖ Chequeo m√©dico previo üîç",
    "‚úÖ Hematolog√≠a (hembras) üî¨",
    "‚úÖ Esterilizaci√≥n OVH/Castraci√≥n",
    "‚úÖ Medicamentos postoperatorios üíä",
    "‚úÖ Consulta de control postoperatorio",
    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
    "¬øDeseas agendar ahora? (Responde *SI* o *NO*)",
  ].join("\n"),
  { capture: true },
  async (ctx, { gotoFlow, endFlow }) => {
    if (ctx.body.toLowerCase() === "si") {
      return gotoFlow(flowAgendar);
    } else {
      return endFlow("üîÑ Puedes volver a escribir *MENU* cuando lo necesites");
    }
  }
);

// Flujo de consultas vacuna
// Flujo de consultas vacuna
const flowVacuna = addKeyword(EVENTS.ACTION)
  .addAnswer(
    [
      "El costo de la Vacunaci√≥n üê∂ en Domicilio üè° es de 45$",
      "",
      "Que incluyen:",
      "‚úÖ Chequeo Previo üîç",
      "‚úÖ Vacuna Sextuple üíâ",
      "‚úÖ Vacuna Antirr√°bica üíâ",
      "(Si aplica)",
      "‚úÖ Desparasitaci√≥n ü¶†",
      "‚úÖ Entrega de Certificado de Vacunaci√≥n üëåüèΩ",
      "========================",
      "El costo de la Vacunaci√≥n üê± en Domicilio üè° es de 55$",
      "",
      "Que incluyen:",
      "‚úÖ Chequeo Previo üîç",
      "‚úÖ Vacuna Triplefelina üíâ",
      "‚úÖ Vacuna Antirr√°bica üíâ",
      "(Si aplica)",
      "‚úÖ Desparasitaci√≥n ü¶†",
      "‚úÖ Entrega de Certificado de Vacunaci√≥n üëåüèΩ",
      "========================",
      "Importante: El costo del servicio puede presentar variaci√≥n, dependiendo de la ubicaci√≥n y el acceso a su domicilio üè°. As√≠ c√≥mo la cantidad de animales a vacunar, atenci√≥n mayor a 4 animales solicita un precio especial üòâ",
      "",
    ].join("\n"),
  )
  .addAnswer(
    [
      "El costo de la Vacunaci√≥n üê∂ en nuestra sede de consulta es de 35$",
      "",
      "Que incluyen:",
      "‚úÖ Chequeo Previo üîç",
      "‚úÖ Vacuna Sextuple üíâ",
      "‚úÖ Vacuna Antirr√°bica üíâ",
      "(Si aplica)",
      "‚úÖ Desparasitaci√≥n ü¶†",
      "‚úÖ Entrega de Certificado de Vacunaci√≥n üëåüèΩ",
      "========================",
      "El costo de la Vacunaci√≥n üê± en nuestra sede de consulta es de 45$",
      "",
      "Que incluyen:",
      "‚úÖ Chequeo Previo üîç",
      "‚úÖ Vacuna Triplefelina üíâ",
      "‚úÖ Vacuna Antirr√°bica üíâ",
      "(Si aplica)",
      "‚úÖ Desparasitaci√≥n ü¶†",
      "‚úÖ Entrega de Certificado de Vacunaci√≥n üëåüèΩ",
      "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
      "¬øDeseas agendar ahora? (Responde *SI* o *NO*)",
    ].join("\n"),
    { delay: 5000, capture: true },
    async (ctx, { gotoFlow, endFlow }) => {
      if (ctx.body.toLowerCase() === "si") {
        return gotoFlow(flowAgendar);
      } else {
        return endFlow("üîÑ Puedes volver a escribir *MENU* cuando lo necesites");
      }
    }
  );


// Flujo principal del men√∫ CORREGIDO
const menuFlow = addKeyword("Ayuda", { sensitive: false }).addAnswer(
  menu,
  { capture: true },
  async (ctx, { gotoFlow, fallBack, endFlow }) => {
    // Removido flowDynamic de los par√°metros

    if (!["1", "2", "3", "4", "5", "0"].includes(ctx.body)) {
      return fallBack(
        "‚ùå Opci√≥n no v√°lida. Por favor elige un n√∫mero del men√∫."
      );
    }

    switch (ctx.body) {
      case "1":
        return gotoFlow(flowEmergenciaRest);
      case "2":
        return gotoFlow(flowConsultas);
      case "3":
        return gotoFlow(flowVacuna);
      case "4":
        return gotoFlow(flowCirujia);
      case "5":
        return endFlow(
          "üîÑ Puedes volver a escribir *MENU* cuando lo necesites"
        );
      default:
        return fallBack("‚ö†Ô∏è Opci√≥n no reconocida");
    }
  }
);

// Importar el m√≥dulo de flujo de Gemini
const main = async () => {
  // Inicializaci√≥n del bot
  const adapterDB = new MockAdapter({
    dbUri: process.env.MONGO_DB_URI,
    dbName: "Asistavetdb" 
  }); // Base de datos mock para pruebas
  const adapterFlow = createFlow([
    // Flujo de bienvenida
    flowPrincipal,
    menuFlow,
    flowEmergenciaRest,
    flowAgendar,
    flowConsultas,
    flowCirujia,
    flowVacuna,
  ]);
  const adapterProvider = createProvider(BaileysProvider);

  // Configuraci√≥n del bot
  createBot({
    flow: adapterFlow,
    provider: adapterProvider,
    database: adapterDB,
  });

  QRPortalWeb(); // Iniciar QR Portal Web
};

main(); // Ejecutar la funci√≥n principal
