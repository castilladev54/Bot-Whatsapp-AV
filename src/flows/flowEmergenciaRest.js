const { addKeyword } = require("@bot-whatsapp/bot");
const { askAndRespond } = require("../services/geminiApi.js");
// Servicios y utilidades
const { validateField } = require("../utils/validationUtils.js");
const { buildEmergencyPrompt } = require("../utils/promptBuilder.js");
const { parseGeminiResponse } = require("../services/geminiServices.js");
const menuFlow=require("./menuFlow.js");
const flowConfirmarCita = require("./flowConfirmarCita.js");

const flowEmergenciaRest = addKeyword(["emergencia", "urgencia"], {
  sensitive: true,
})
  .addAnswer("¬øQu√© s√≠ntomas presenta tu animal de compa√±√≠a y desde cu√°ndo?", {
    capture: true,
  }, async (ctx, { state, fallBack }) => {
    const input = ctx.body.trim();
    if (!validateField(input)) return fallBack("‚ùå Por favor, describe los s√≠ntomas.");
    await state.update({ emergencyDescription: input });
  })
  .addAnswer("üìç ¬øDesde d√≥nde nos escribes o d√≥nde se encuentra el paciente?", {
    capture: true,
  }, async (ctx, { state }) => {
    const input = ctx.body.trim();
    await state.update({ userLocation: input });
  })
  .addAnswer("üêæ ¬øQu√© especie es? (Perro, Gato, Ganado, Otro)", {
    capture: true,
  }, async (ctx, { state }) => {
    const input = ctx.body.trim();
    await state.update({ species: input });
  })
  .addAnswer("‚ö§ ¬øSexo? (Macho / Hembra)", {
    capture: true,
  }, async (ctx, { state }) => {
    const input = ctx.body.trim();
    await state.update({ patientGender: input });
  })
  .addAnswer("üéÇ ¬øCu√°l es la *edad aproximada* de tu animal de compa√±√≠a?", {
    capture: true,
  }, async (ctx, { state }) => {
    const input = ctx.body.trim();
    await state.update({ patientAge: input });
  })
  .addAnswer("üìù Entendido. ¬øCu√°l es el *nombre del paciente* (tu compa√±ero)?", {
    capture: true,
  }, async (ctx, { state }) => {
    const input = ctx.body.trim();
    await state.update({ patientName: input });
  })
  .addAnswer("üôã‚Äç‚ôÇÔ∏è ¬øCon qui√©n tenemos el gusto de conversar? (Tu nombre como tutor/responsable)", {
    capture: true,
  }, async (ctx, { state }) => {
    const input = ctx.body.trim();
    await state.update({ ownerName: input });
  })
  .addAnswer("üìã ¬øTu animal de compa√±√≠a tiene *alguna condici√≥n m√©dica previa* que debamos saber? (Escr√≠bela o pon 'ninguna')", {
    capture: true,
  }, async (ctx, { state, flowDynamic, gotoFlow }) => {
    const input = ctx.body.trim();
    await state.update({ medicalHistory: input });

    const fullState = await state.getMyState();
    const prompt = buildEmergencyPrompt(fullState);

    await flowDynamic([
      `üîé ¬°Gracias, ${fullState.ownerName}! Analizando el caso de ${fullState.patientName || "tu mascota"}...`,
      { delay: 3000 }
    ]);

    try {
      const geminiResponse = await askAndRespond(prompt, `Consulta de ${fullState.ownerName}`);
      if (!geminiResponse?.trim()) {
        await flowDynamic("‚ö†Ô∏è No pude obtener una respuesta clara. Vuelve a intentarlo.");
        return gotoFlow(menuFlow);
      }

      const { evaluation, contactAndPricing, nextStepsPrompt } = parseGeminiResponse(geminiResponse);

      await flowDynamic("üîç NUESTRA EVALUACI√ìN Y LO QUE RECOMENDAMOS");
      await flowDynamic(evaluation);

      await flowDynamic("üìû INFORMACI√ìN DE CONTACTO");
      await flowDynamic(contactAndPricing);

      await flowDynamic("üîú PR√ìXIMOS PASOS");
      await flowDynamic(nextStepsPrompt);

    } catch (error) {
      console.error("üö® Error en Gemini:", error.message);
      await flowDynamic([
        "‚ö†Ô∏è *Error en el sistema*",
        "Por favor contacta directamente:",
        "üìû 0424-555-5555",
        "üìç Ocumare del Tuy, Calle Sucre"
      ]);
      await state.clear();
      return gotoFlow(menuFlow);
    }
  })
  .addAction(
   { capture: true },
  async (ctx, { gotoFlow, fallBack, flowDynamic, state }) => {
    try {
      const msg = ctx.body.trim();
      const fullState = await state.getMyState();

      // Validaci√≥n de nombre de mascota
      if (!fullState.patientName) {
        await flowDynamic("‚ö†Ô∏è No hemos registrado el nombre de tu mascota. Volviendo al inicio.");
        return gotoFlow(flowBienvenida);
      }
      
      if (msg === "1") {
        await flowDynamic("üöÄ ¬°Perfecto! Vamos a agendar tu cita.");
         return gotoFlow(flowConfirmarCita);
      } 
      
      if (msg === "2") {
        await flowDynamic("üè° Volviendo al men√∫ principal...");
        await state.clear();
        return gotoFlow(menuFlow);
      }

      return fallBack("‚ùå Opci√≥n no v√°lida. Por favor escribe *1* o *2*.");
    } catch (error) {
      console.error("Error en addAction:", error);
      
    }
  }
)



module.exports = flowEmergenciaRest;